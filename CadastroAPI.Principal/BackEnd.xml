<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CadastroAPI</name>
    </assembly>
    <members>
        <member name="M:BackEnd.Controllers.MensageriaController.PublicarCliente(BackEnd.Models.Cliente)">
            <summary>
            Publica um cliente na fila do RabbitMQ
            </summary>
            <param name="cliente">O objeto cliente a ser publicado</param>
            <returns>Resultado da operação</returns>
        </member>
        <member name="M:BackEnd.Controllers.MensageriaController.PublicarMensagem``1(``0,System.String)">
            <summary>
            Publica uma mensagem genérica na fila especificada
            </summary>
            <typeparam name="T">Tipo da mensagem</typeparam>
            <param name="mensagem">A mensagem a ser publicada</param>
            <param name="fila">Nome da fila</param>
            <returns>Resultado da operação</returns>
        </member>
        <member name="M:BackEnd.Controllers.MensageriaController.PublicarMensagemTeste(System.String)">
            <summary>
            Publica uma mensagem de teste na fila especificada
            </summary>
            <param name="fila">Nome da fila</param>
            <returns>Resultado da operação</returns>
        </member>
        <member name="T:BackEnd.Services.ClienteMessageProcessor">
            <summary>
            Processador de mensagens de Cliente
            </summary>
        </member>
        <member name="M:BackEnd.Services.ClienteMessageProcessor.#ctor(Microsoft.Extensions.Logging.ILogger{BackEnd.Services.ClienteMessageProcessor})">
            <summary>
            Construtor do processador de mensagens de Cliente
            </summary>
            <param name="logger">Logger para registro de eventos</param>
        </member>
        <member name="M:BackEnd.Services.ClienteMessageProcessor.ValidateMessage(BackEnd.Models.Cliente,System.String)">
            <summary>
            Valida a mensagem de Cliente antes de processá-la
            </summary>
            <param name="message">A mensagem a ser validada</param>
            <param name="messageId">Identificador único da mensagem</param>
            <returns>True se a mensagem é válida, False caso contrário</returns>
        </member>
        <member name="M:BackEnd.Services.ClienteMessageProcessor.ProcessInternalAsync(BackEnd.Models.Cliente,System.String,System.DateTime)">
            <summary>
            Implementação do processamento da mensagem de Cliente
            </summary>
            <param name="message">A mensagem a ser processada</param>
            <param name="messageId">Identificador único da mensagem</param>
            <param name="timestamp">Timestamp de quando a mensagem foi publicada</param>
            <returns>Task que representa a operação assíncrona, com resultado indicando se o processamento foi bem-sucedido</returns>
        </member>
        <member name="T:BackEnd.Services.IMessageConsumer">
            <summary>
            Interface para consumo de mensagens de filas
            </summary>
        </member>
        <member name="M:BackEnd.Services.IMessageConsumer.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Inicia o consumo de mensagens de forma assíncrona
            </summary>
            <param name="cancellationToken">Token para cancelamento da operação</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="M:BackEnd.Services.IMessageConsumer.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Para o consumo de mensagens de forma assíncrona
            </summary>
            <param name="cancellationToken">Token para cancelamento da operação</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="P:BackEnd.Services.IMessageConsumer.IsRunning">
            <summary>
            Verifica se o consumidor está em execução
            </summary>
        </member>
        <member name="P:BackEnd.Services.IMessageConsumer.QueueName">
            <summary>
            Nome da fila que está sendo consumida
            </summary>
        </member>
        <member name="T:BackEnd.Services.IMessageProcessor`1">
            <summary>
            Interface para processamento de mensagens
            </summary>
            <typeparam name="T">Tipo de mensagem a ser processada</typeparam>
        </member>
        <member name="M:BackEnd.Services.IMessageProcessor`1.ProcessMessageAsync(`0,System.String,System.DateTime)">
            <summary>
            Processa uma mensagem de forma assíncrona
            </summary>
            <param name="message">A mensagem a ser processada</param>
            <param name="messageId">Identificador único da mensagem</param>
            <param name="timestamp">Timestamp de quando a mensagem foi publicada</param>
            <returns>Task que representa a operação assíncrona, com resultado indicando se o processamento foi bem-sucedido</returns>
        </member>
        <member name="M:BackEnd.Services.IRabbitMQService.PublicarCliente(BackEnd.Models.Cliente)">
            <summary>
            Publica um cliente na fila do RabbitMQ
            </summary>
            <param name="cliente">O objeto cliente a ser publicado</param>
            <returns>True se a publicação foi bem-sucedida, False caso contrário</returns>
        </member>
        <member name="M:BackEnd.Services.IRabbitMQService.PublicarMensagem``1(``0,System.String)">
            <summary>
            Publica uma mensagem na fila especificada
            </summary>
            <typeparam name="T">Tipo da mensagem</typeparam>
            <param name="message">Mensagem a ser publicada</param>
            <param name="queueName">Nome da fila</param>
            <returns>True se a publicação foi bem-sucedida, False caso contrário</returns>
        </member>
        <member name="M:BackEnd.Services.IRabbitMQService.PublicarMensagemAsync``1(``0,System.String)">
            <summary>
            Publica uma mensagem na fila especificada de forma assíncrona
            </summary>
            <typeparam name="T">Tipo da mensagem</typeparam>
            <param name="message">Mensagem a ser publicada</param>
            <param name="queueName">Nome da fila</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="T:BackEnd.Services.MessageConsumerLoggingExtensions">
            <summary>
            Extensões para logging do consumidor de mensagens
            </summary>
        </member>
        <member name="M:BackEnd.Services.MessageConsumerLoggingExtensions.ConnectionEstablished(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Registra que uma conexão foi estabelecida com o RabbitMQ
            </summary>
        </member>
        <member name="M:BackEnd.Services.MessageConsumerLoggingExtensions.ConnectionFailed(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception)">
            <summary>
            Registra que houve falha ao conectar com o RabbitMQ
            </summary>
        </member>
        <member name="M:BackEnd.Services.MessageConsumerLoggingExtensions.ConsumerStarted(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Registra que o consumidor foi iniciado
            </summary>
        </member>
        <member name="M:BackEnd.Services.MessageConsumerLoggingExtensions.ConsumerStopped(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Registra que o consumidor foi parado
            </summary>
        </member>
        <member name="M:BackEnd.Services.MessageConsumerLoggingExtensions.MessageReceived(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Registra que uma mensagem foi recebida
            </summary>
        </member>
        <member name="M:BackEnd.Services.MessageConsumerLoggingExtensions.MessageProcessed(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Registra que uma mensagem foi processada com sucesso
            </summary>
        </member>
        <member name="M:BackEnd.Services.MessageConsumerLoggingExtensions.MessageProcessingFailed(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception)">
            <summary>
            Registra que houve falha ao processar uma mensagem
            </summary>
        </member>
        <member name="M:BackEnd.Services.MessageConsumerLoggingExtensions.Reconnecting(Microsoft.Extensions.Logging.ILogger,System.String,System.Int32)">
            <summary>
            Registra que está tentando reconectar ao RabbitMQ
            </summary>
        </member>
        <member name="T:BackEnd.Services.MessageProcessorBase`1">
            <summary>
            Classe base para processadores de mensagens
            </summary>
            <typeparam name="T">Tipo de mensagem a ser processada</typeparam>
        </member>
        <member name="M:BackEnd.Services.MessageProcessorBase`1.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Construtor da classe base
            </summary>
            <param name="logger">Logger para registro de eventos</param>
        </member>
        <member name="M:BackEnd.Services.MessageProcessorBase`1.ProcessMessageAsync(`0,System.String,System.DateTime)">
            <summary>
            Processa uma mensagem de forma assíncrona
            </summary>
            <param name="message">A mensagem a ser processada</param>
            <param name="messageId">Identificador único da mensagem</param>
            <param name="timestamp">Timestamp de quando a mensagem foi publicada</param>
            <returns>Task que representa a operação assíncrona, com resultado indicando se o processamento foi bem-sucedido</returns>
        </member>
        <member name="M:BackEnd.Services.MessageProcessorBase`1.ValidateMessage(`0,System.String)">
            <summary>
            Valida a mensagem antes de processá-la
            </summary>
            <param name="message">A mensagem a ser validada</param>
            <param name="messageId">Identificador único da mensagem</param>
            <returns>True se a mensagem é válida, False caso contrário</returns>
        </member>
        <member name="M:BackEnd.Services.MessageProcessorBase`1.ProcessInternalAsync(`0,System.String,System.DateTime)">
            <summary>
            Implementação interna do processamento da mensagem
            </summary>
            <param name="message">A mensagem a ser processada</param>
            <param name="messageId">Identificador único da mensagem</param>
            <param name="timestamp">Timestamp de quando a mensagem foi publicada</param>
            <returns>Task que representa a operação assíncrona, com resultado indicando se o processamento foi bem-sucedido</returns>
        </member>
        <member name="T:BackEnd.Services.RabbitMQConsumerFactory">
            <summary>
            Fábrica para criar e gerenciar múltiplos consumidores RabbitMQ
            </summary>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerFactory.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{BackEnd.Services.RabbitMQConsumerFactory},Microsoft.Extensions.Options.IOptions{BackEnd.Services.RabbitMQOptions},Microsoft.Extensions.Options.IOptions{BackEnd.Services.RabbitMQConsumerOptions})">
            <summary>
            Construtor da fábrica de consumidores
            </summary>
            <param name="serviceProvider">Provedor de serviços para criar instâncias de consumidores</param>
            <param name="logger">Logger para registro de eventos</param>
            <param name="rabbitOptions">Opções de configuração do RabbitMQ</param>
            <param name="consumerOptions">Opções de configuração dos consumidores</param>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerFactory.CreateAndStartConsumersAsync``2(System.String)">
            <summary>
            Cria e inicia consumidores para uma fila específica
            </summary>
            <typeparam name="T">Tipo de mensagem a ser consumida</typeparam>
            <typeparam name="TProcessor">Tipo do processador de mensagens</typeparam>
            <param name="queueName">Nome da fila</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerFactory.StopConsumersAsync(System.String)">
            <summary>
            Para todos os consumidores de uma fila específica
            </summary>
            <param name="queueName">Nome da fila</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerFactory.StopAllConsumersAsync">
            <summary>
            Para todos os consumidores de todas as filas
            </summary>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="T:BackEnd.Services.RabbitMQConsumerHostedService">
            <summary>
            Serviço hospedado para iniciar e parar consumidores RabbitMQ automaticamente
            </summary>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerHostedService.#ctor(BackEnd.Services.RabbitMQConsumerFactory,Microsoft.Extensions.Logging.ILogger{BackEnd.Services.RabbitMQConsumerHostedService})">
            <summary>
            Construtor do serviço hospedado
            </summary>
            <param name="consumerFactory">Fábrica de consumidores RabbitMQ</param>
            <param name="logger">Logger para registro de eventos</param>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Inicia os consumidores quando a aplicação é iniciada
            </summary>
            <param name="cancellationToken">Token para cancelamento da operação</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Para os consumidores quando a aplicação é encerrada
            </summary>
            <param name="cancellationToken">Token para cancelamento da operação</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="T:BackEnd.Services.RabbitMQConsumerOptions">
            <summary>
            Opções de configuração para consumidores RabbitMQ
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQConsumerOptions.ConsumerCount">
            <summary>
            Número de instâncias de consumidores por fila
            </summary>
            <remarks>
            Aumentar este valor permite processar mais mensagens em paralelo,
            facilitando a escalabilidade horizontal.
            </remarks>
        </member>
        <member name="P:BackEnd.Services.RabbitMQConsumerOptions.PrefetchCount">
            <summary>
            Número máximo de mensagens que um consumidor pode processar simultaneamente
            </summary>
            <remarks>
            Este valor controla o prefetch count do RabbitMQ e afeta diretamente
            a distribuição de carga entre os consumidores.
            </remarks>
        </member>
        <member name="P:BackEnd.Services.RabbitMQConsumerOptions.ProcessingTimeoutMs">
            <summary>
            Tempo máximo em milissegundos para processar uma mensagem
            </summary>
            <remarks>
            Se o processamento exceder este tempo, a mensagem será considerada como falha
            e poderá ser recolocada na fila dependendo da configuração.
            </remarks>
        </member>
        <member name="P:BackEnd.Services.RabbitMQConsumerOptions.QueueOptions">
            <summary>
            Configurações específicas para cada fila
            </summary>
        </member>
        <member name="T:BackEnd.Services.QueueConsumerOptions">
            <summary>
            Opções de configuração para uma fila específica
            </summary>
        </member>
        <member name="P:BackEnd.Services.QueueConsumerOptions.QueueName">
            <summary>
            Nome da fila
            </summary>
        </member>
        <member name="P:BackEnd.Services.QueueConsumerOptions.ConsumerCount">
            <summary>
            Número de instâncias de consumidores para esta fila específica
            </summary>
            <remarks>
            Se definido, substitui o valor global ConsumerCount
            </remarks>
        </member>
        <member name="P:BackEnd.Services.QueueConsumerOptions.PrefetchCount">
            <summary>
            Número máximo de mensagens que um consumidor pode processar simultaneamente para esta fila
            </summary>
            <remarks>
            Se definido, substitui o valor global PrefetchCount
            </remarks>
        </member>
        <member name="P:BackEnd.Services.QueueConsumerOptions.RequeueOnFailure">
            <summary>
            Indica se as mensagens devem ser recolocadas na fila em caso de falha no processamento
            </summary>
        </member>
        <member name="P:BackEnd.Services.QueueConsumerOptions.MaxRetryCount">
            <summary>
            Número máximo de tentativas de processamento antes de mover a mensagem para uma fila de mensagens mortas
            </summary>
        </member>
        <member name="P:BackEnd.Services.QueueConsumerOptions.DeadLetterQueue">
            <summary>
            Nome da fila de mensagens mortas (DLQ) para onde as mensagens serão enviadas após exceder o número máximo de tentativas
            </summary>
        </member>
        <member name="T:BackEnd.Services.RabbitMQConsumerService`1">
            <summary>
            Serviço para consumo de mensagens do RabbitMQ
            </summary>
            <typeparam name="T">Tipo de mensagem a ser consumida</typeparam>
        </member>
        <member name="P:BackEnd.Services.RabbitMQConsumerService`1.IsRunning">
            <summary>
            Indica se o consumidor está em execução
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQConsumerService`1.QueueName">
            <summary>
            Nome da fila que está sendo consumida
            </summary>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.#ctor(Microsoft.Extensions.Logging.ILogger{BackEnd.Services.RabbitMQConsumerService{`0}},BackEnd.Services.RabbitMQOptions,BackEnd.Services.RabbitMQConsumerOptions,BackEnd.Services.IMessageProcessor{`0},System.String)">
            <summary>
            Construtor do serviço de consumo
            </summary>
            <param name="logger">Logger para registro de eventos</param>
            <param name="rabbitOptions">Opções de configuração do RabbitMQ</param>
            <param name="consumerOptions">Opções de configuração dos consumidores</param>
            <param name="messageProcessor">Processador de mensagens</param>
            <param name="queueName">Nome da fila a ser consumida</param>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Inicia o consumo de mensagens de forma assíncrona
            </summary>
            <param name="cancellationToken">Token para cancelamento da operação</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Para o consumo de mensagens de forma assíncrona
            </summary>
            <param name="cancellationToken">Token para cancelamento da operação</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.EstabelecerConexaoAsync(System.Threading.CancellationToken)">
            <summary>
            Estabelece conexão com o servidor RabbitMQ
            </summary>
            <param name="cancellationToken">Token para cancelamento da operação</param>
            <returns>Task que representa a operação assíncrona</returns>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.MonitorConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Monitora a conexão e tenta reconectar em caso de falha
            </summary>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.HandleMessageReceivedAsync(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Manipula mensagens recebidas do RabbitMQ
            </summary>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.Dispose">
            <summary>
            Libera recursos não gerenciados
            </summary>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.Dispose(System.Boolean)">
            <summary>
            Libera recursos não gerenciados e opcionalmente recursos gerenciados
            </summary>
        </member>
        <member name="M:BackEnd.Services.RabbitMQConsumerService`1.Finalize">
            <summary>
            Destrutor
            </summary>
        </member>
        <member name="T:BackEnd.Services.RabbitMQOptions">
            <summary>
            Opções de configuração para conexão com o RabbitMQ
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.HostName">
            <summary>
            Endereço do servidor RabbitMQ
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.Port">
            <summary>
            Porta do servidor RabbitMQ
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.UserName">
            <summary>
            Nome de usuário para autenticação no RabbitMQ
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.Password">
            <summary>
            Senha para autenticação no RabbitMQ
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.VirtualHost">
            <summary>
            Virtual host no RabbitMQ
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.ConnectionTimeout">
            <summary>
            Tempo limite para conexão em milissegundos
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.UseSsl">
            <summary>
            Indica se deve usar SSL/TLS para conexão
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.MaxReconnectAttempts">
            <summary>
            Número máximo de tentativas de reconexão
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.ReconnectInterval">
            <summary>
            Intervalo inicial entre tentativas de reconexão em milissegundos
            </summary>
        </member>
        <member name="P:BackEnd.Services.RabbitMQOptions.ReconnectBackoffMultiplier">
            <summary>
            Fator de multiplicação para backoff exponencial entre tentativas
            </summary>
        </member>
    </members>
</doc>
